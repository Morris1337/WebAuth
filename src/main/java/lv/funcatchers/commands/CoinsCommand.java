package commands;

import economy.CurrencyManager;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.command.*;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.scoreboard.*;

import java.util.List;

public class CoinsCommand implements CommandExecutor {

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {

        if (!(sender instanceof Player player)) {
            sender.sendMessage("‚õî –¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.");
            return true;
        }

        if (args.length != 2) {
            player.sendMessage("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /coins get <n> –∏–ª–∏ /coins send <n>");
            return true;
        }

        if (args.length == 0) {
            showBalanceScoreboard(player);
            return true;
        }

        int amount;
        try {
            amount = Integer.parseInt(args[1]);
        } catch (NumberFormatException e) {
            player.sendMessage("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
            return true;
        }

        if (amount <= 0) {
            player.sendMessage("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.");
            return true;
        }

        switch (args[0].toLowerCase()) {
            case "get" -> handleGet(player, amount);
            case "send" -> handleSend(player, amount);
            default -> player.sendMessage("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /coins get <n> –∏–ª–∏ /coins send <n>");
        }

        return true;
    }

    public static ItemStack createCoin(int amount) {
        ItemStack item = new ItemStack(Material.GOLD_NUGGET, amount);
        ItemMeta meta = item.getItemMeta();
        meta.setDisplayName(ChatColor.GOLD + "–ú–æ–Ω–µ—Ç–∞");
        meta.setLore(List.of(
                ChatColor.GRAY + "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ FunCatchers",
                ChatColor.WHITE + "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –æ–±–º–µ–Ω–∞"
        ));
        meta.getPersistentDataContainer().set(
                new NamespacedKey(Bukkit.getPluginManager().getPlugin("WebAuth"), "moneta"),
                PersistentDataType.BYTE,
                (byte) 1
        );
        item.setItemMeta(meta);
        return item;
    }


    private void handleGet(Player player, int amount) {
        CurrencyManager.getBalance(player.getName(), siteBalance -> {
            if (siteBalance < amount) {
                player.sendMessage("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å–∞–π—Ç–µ. –ë–∞–ª–∞–Ω—Å: " + siteBalance);
                return;
            }

            // üü¢ –ü–†–ê–í–ò–õ–¨–ù–û: –ë–ê–ù–ö –æ—Ç–¥–∞—ë—Ç –∏–≥—Ä–æ–∫—É
            CurrencyManager.transfer(player.getName(), "BANK", amount, success -> {
                if (!success) {
                    player.sendMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞–ª—é—Ç—É —Å —Å–∞–π—Ç–∞.");
                    return;
                }

                Bukkit.getScheduler().runTask(Bukkit.getPluginManager().getPlugin("WebAuth"), () -> {
                    int fullStacks = amount / 64;
                    int remainder = amount % 64;

                    for (int i = 0; i < fullStacks; i++) {
                        player.getInventory().addItem(CoinsCommand.createCoin(64));
                    }
                    if (remainder > 0) {
                        player.getInventory().addItem(CoinsCommand.createCoin(remainder));
                    }

                    player.sendMessage("üí∞ –ü–æ–ª—É—á–µ–Ω–æ " + amount + " –º–æ–Ω–µ—Ç —Å —Å–∞–π—Ç–∞.");
                });
            });
        }, error -> player.sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: " + error));
    }

    private void handleSend(Player player, int amount) {
        int count = CurrencyManager.getMonetCount(player);
        if (count < amount) {
            player.sendMessage("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç. –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: " + count);
            return;
        }

        // üü¢ –ò–ì–†–û–ö –æ—Ç–¥–∞—ë—Ç –ë–ê–ù–ö–£
        CurrencyManager.transfer("BANK", player.getName(), amount, success -> {
            Bukkit.getScheduler().runTask(Bukkit.getPluginManager().getPlugin("WebAuth"), () -> {
                if (!success) {
                    player.sendMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—á–∏—Å–ª–∏—Ç—å –≤–∞–ª—é—Ç—É –Ω–∞ —Å–∞–π—Ç.");
                    return;
                }

                // ‚ùó –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                CurrencyManager.removeMonets(player, amount);
                player.sendMessage("üè¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ " + amount + " –º–æ–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç.");
            });
        });
    }


    private void showBalanceScoreboard(Player player) {
        CurrencyManager.getBalance(player.getName(), balance -> {
            Bukkit.getScheduler().runTask(Bukkit.getPluginManager().getPlugin("WebAuth"), () -> {
                ScoreboardManager manager = Bukkit.getScoreboardManager();
                Scoreboard board = manager.getNewScoreboard();

                Objective obj = board.registerNewObjective("coinView", "dummy", "üí∞ –ë–∞–ª–∞–Ω—Å (–±–∞–Ω–∫)");
                obj.setDisplaySlot(DisplaySlot.SIDEBAR);

                Score score = obj.getScore("–ú–æ–Ω–µ—Ç: " + balance);
                score.setScore(1);

                player.setScoreboard(board);

                // –û—á–∏—Å—Ç–∏–º –ø–æ—Å–ª–µ 30 —Å–µ–∫ (–µ—Å–ª–∏ –Ω–µ –∑–∞–º–µ–Ω–∏–ª–∏)
                Bukkit.getScheduler().runTaskLater(Bukkit.getPluginManager().getPlugin("WebAuth"), () -> {
                    if (player.isOnline() && player.getScoreboard().getObjective("coinView") != null) {
                        player.setScoreboard(Bukkit.getScoreboardManager().getNewScoreboard());
                    }
                }, 20L * 30);
            });
        }, error -> player.sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: " + error));
    }

}
