package lv.funcatchers;
import lv.funcatchers.ActivitatesReact.*;
import lv.funcatchers.ActivitatesReact.ActivityMenuGUI;
import lv.funcatchers.executableitems.ExecutableItemHandler;
import lv.funcatchers.listeners.FoodListener;
import lv.funcatchers.listeners.VillagerTradeListener;
import lv.funcatchers.rpghealth.*;
import lv.funcatchers.rpgmana.ManaItemRegistry;
import lv.funcatchers.rpgmana.ManaManager;
import lv.funcatchers.utils.FoodHealthConfig;
import lv.funcatchers.utils.VillagerTradeConfig;
import org.bukkit.Location;
import org.bukkit.event.entity.EntityDamageEvent;
import org.json.JSONObject;

import lv.funcatchers.PlayerStatsManager;
import lv.funcatchers.rpghealth.HealthManager.*;

import okhttp3.*;
import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.*;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.player.*;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.inventory.ItemStack;
import org.bukkit.Material;
import org.bukkit.potion.PotionEffect;

import org.json.JSONArray; // –≠—Ç–æ –≤–∞–∂–Ω–æ!


import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.Map;




public class WebAuth extends JavaPlugin implements Listener {

    private static WebAuth instance;
    private VillagerTradeConfig tradeConfig;
    private final OkHttpClient client = new OkHttpClient();
    //private final Set<String> unauthenticatedPlayers = new HashSet<>();
    private static final Set<String> unauthenticatedPlayers = new HashSet<>();
    private static final Map<String, Integer> authenticatedIds = new HashMap<>();
    private PlayerStatsManager statsManager;

    public static int getUserId(Player player) {
        return authenticatedIds.getOrDefault(player.getName(), -1);
    }
    public static boolean isUnauthenticated(Player player) {
        return unauthenticatedPlayers.contains(player.getName());
    }
    public static void setUserId(Player player, int id) {
        authenticatedIds.put(player.getName(), id);
    }
    public PlayerStatsManager getStatsManager() {
        return this.statsManager;
    }
    public VillagerTradeConfig getTradeConfig() {
        return tradeConfig;
    }


    @Override
    public void onEnable() {
        this.statsManager = new PlayerStatsManager(this); // ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª–µ

        instance = this;

        // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Ç—Ä–µ–π–¥–æ–≤
        tradeConfig = new VillagerTradeConfig();

        getCommand("mc-upgrade").setExecutor(statsManager);
        getCommand("mc-stats").setExecutor(statsManager);
        getCommand("mc-reloadstats").setExecutor(statsManager); // üîÅ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ PlayerStatsManager
        getCommand("coins").setExecutor(new commands.CoinsCommand());
        getCommand("updateactivities").setExecutor(new UpdateActivitiesCommand(this));
        getCommand("joinactivity").setExecutor(new OpenActivitiesLinkCommand(this));
        ActivityMenuGUI gui = new ActivityMenuGUI(this);
        getCommand("activities").setExecutor(new ActivitiesCommand(gui));


        getServer().getPluginManager().registerEvents(new VillagerTradeListener(), this);
//        tradeConfig = new VillagerTradeConfig();
        ManaItemRegistry.load(getDataFolder());

        FoodConfigManager foodConfig = new FoodConfigManager(getDataFolder());
        Bukkit.getPluginManager().registerEvents(new HotbarEatListener(foodConfig), this);
        Bukkit.getPluginManager().registerEvents(new RightClickEatListener(foodConfig), this);
        new ActivityMenuGUI(this);


        HealthManager healthManager = new HealthManager(this); // this = WebAuth
        getServer().getPluginManager().registerEvents(new HealthListener(this, healthManager), this);


        Bukkit.getPluginManager().registerEvents(statsManager, this);
        Bukkit.getPluginManager().registerEvents(this, this);
        getLogger().info("‚úÖ WebAuth plugin enabled");
        Bukkit.getScheduler().runTaskTimerAsynchronously(this, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                if (!unauthenticatedPlayers.contains(player.getName())) {
                    sendPlayerStatsToSite(player);
                }
            }
        }, 0L, 200L); // 200 —Ç–∏–∫–æ–≤ = 10 —Å–µ–∫ —É–Ω–¥
        Bukkit.getScheduler().runTaskLater(this, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                int userId = getUserId(player);
                String uuid = player.getUniqueId().toString();
//                HealthManager.getInstance().loadAndApply(player, uuid, false);

            }
        }, 40L);
        Bukkit.getPluginManager().registerEvents(new lv.funcatchers.debug.MobDebugListener(), this);
        getServer().getPluginManager().registerEvents(new lv.funcatchers.listeners.PermissionSyncListener(this), this);

        Bukkit.getScheduler().runTaskTimer(this, () -> {
            new HologramUpdater(this).updateHologram(new Location(Bukkit.getWorld("world"), 21, 112, -9));
        }, 0L, 20L * 300); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

        Location hologramLocation = new Location(
                Bukkit.getWorld("world"), // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –º–∏—Ä
                100.5, 65, 200.5           // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞—à–µ–π –≥–æ–ª–æ–≥—Ä–∞–º–º—ã
        );

        HologramUpdater updater = new HologramUpdater(this);
        updater.startAutoUpdate(hologramLocation); // ‚è±Ô∏è –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏

        ExecutableItemHandler eiHandler = new ExecutableItemHandler();
        getCommand("hp-add").setExecutor(eiHandler);
        getCommand("hp-temp").setExecutor(eiHandler);

    }
    public static WebAuth getInstance() {
        return instance;
    }

    @Override
    public void onDisable() {
        unauthenticatedPlayers.clear();
    }

    @EventHandler
    public void onRespawn(PlayerRespawnEvent event) {
            Player player = event.getPlayer();
            player.setFoodLevel(20); // –≤—Å–µ–≥–¥–∞ 20
            player.setSaturation(20f);
    }


    @EventHandler
    public void onJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        unauthenticatedPlayers.add(player.getName());
        player.sendMessage("üîí –í–≤–µ–¥–∏—Ç–µ /mc-login <–ø–∞—Ä–æ–ª—å> –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
        Bukkit.getScheduler().runTaskLater(this, () -> {
            int userId = getUserId(player);
            if (userId != -1) {
                HealthManager.getInstance().updateBossBar(player);
            }
        }, 40L);
        player.setInvisible(false);
        PlayerStatsManager.load(player);
//        ManaManager.init(player);
        player.setFoodLevel(20); // –≤—Å–µ–≥–¥–∞ 20
        player.setSaturation(20f);

    }

    @EventHandler
    public void onQuit(PlayerQuitEvent event) {
        Player player = event.getPlayer();
        unauthenticatedPlayers.remove(player.getName());
        int userId = getUserId(player);
        if (userId != -1) {
            double currentHealth = HealthManager.getInstance().getHealth(player);
            double maxHealth = HealthManager.getInstance().getMaxHealth(player);
            HealthManager.getInstance().sendHealthToSite(player);
            PlayerStatsManager.unload(player);
            ManaManager.remove(player);
        }
    }

    @EventHandler(priority = EventPriority.HIGH)
    public void onPlayerMove(PlayerMoveEvent event) {
        if (unauthenticatedPlayers.contains(event.getPlayer().getName())) {
            event.setCancelled(true);
        }
        Player player = event.getPlayer();
        player.setFoodLevel(20); // –≤—Å–µ–≥–¥–∞ 20
        player.setSaturation(20f);
    }

    @EventHandler
    public void onBlockBreak(BlockBreakEvent event) {
        if (unauthenticatedPlayers.contains(event.getPlayer().getName())) {
            event.setCancelled(true);
        }
        Player player = event.getPlayer();
        player.setFoodLevel(20); // –≤—Å–µ–≥–¥–∞ 20
        player.setSaturation(20f);
    }

    @EventHandler
    public void onBlockPlace(BlockPlaceEvent event) {
        if (unauthenticatedPlayers.contains(event.getPlayer().getName())) {
            event.setCancelled(true);
        }
        Player player = event.getPlayer();
        player.setFoodLevel(20); // –≤—Å–µ–≥–¥–∞ 20
        player.setSaturation(20f);
    }

    @EventHandler
    public void onEntityDamage(EntityDamageByEntityEvent event) {
        if (event.getDamager() instanceof Player p && unauthenticatedPlayers.contains(p.getName())) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onInteract(PlayerInteractEvent event) {
        if (unauthenticatedPlayers.contains(event.getPlayer().getName())) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onEntityInteract(PlayerInteractEntityEvent event) {
        if (unauthenticatedPlayers.contains(event.getPlayer().getName())) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onTakeDamage(EntityDamageEvent event) {
        if (event.getEntity() instanceof Player player &&
                unauthenticatedPlayers.contains(player.getName())) {
            player.setFoodLevel(20); // –≤—Å–µ–≥–¥–∞ 20
            player.setSaturation(20f);
        }
    }


    @EventHandler
    public void onChat(AsyncPlayerChatEvent event) {
        if (unauthenticatedPlayers.contains(event.getPlayer().getName())) {
            event.setCancelled(true);
        }
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player player)) {
            sender.sendMessage("‚ùå –¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.");
            return true;
        }

        if (command.getName().equalsIgnoreCase("mc-login")) {
            if (args.length != 1) {
                player.sendMessage("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mc-login <–ø–∞—Ä–æ–ª—å>");
                return true;
            }

            String username = player.getName(); // –∞–≤—Ç–æ-–ª–æ–≥–∏–Ω –ø–æ –Ω–∏–∫–∞–º Minecraft
            String password = args[0];

            RequestBody body = RequestBody.create(MediaType.parse("application/json"),
                    "{\"username\":\"" + username + "\",\"password\":\"" + password + "\"}");

            Request request = new Request.Builder()
                    .url("http://fc-server.zapto.org/api/users/login-minecraft")
                    .post(body)
                    .addHeader("Content-Type", "application/json")
                    .build();
            JavaPlugin plugin = WebAuth.this; // üëà –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–∞–≥–∏–Ω

            client.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
                    player.sendMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API");
                    getLogger().warning("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + e.getMessage());
                }

                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    String json = response.body().string();
                    getLogger().info("üì° –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + response.code());
                    getLogger().info("üì° –û—Ç–≤–µ—Ç –æ—Ç API: " + json);
                    getLogger().info("üìõ –õ–æ–≥–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫: " + username + ", –ø–∞—Ä–æ–ª—å: " + password);
                    if (response.isSuccessful()) {
                        JSONObject obj = new JSONObject(json);
                        int userId = obj.getInt("id"); // –ø—Ä–∞–≤–∏–ª—å–Ω–æ!

                        authenticatedIds.put(player.getName(), userId);
                        WebAuth.setUserId(player, userId);
                        EffectRegistry.loadFromServer(userId);

                        Bukkit.getScheduler().runTask(plugin, () -> {
                            getLogger().info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –¥–ª—è: " + player.getName() + ", userId=" + userId);

                            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
                            HealthManager.getInstance().loadAndApply(player, player.getUniqueId().toString(), false);

                            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
                            Bukkit.getScheduler().runTaskLater(plugin, () -> {
//                                HealthManager.getInstance().saveHealthToApi(player);
                                HealthManager.getInstance().updateBossBar(player);
                            }, 40L);

                            unauthenticatedPlayers.remove(player.getName());
                            player.sendMessage("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä!");
                            PlayerStatsManager.markAuthenticated(player);
                            statsManager.applyEffects(player);

                            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BossBar
                            HealthManager.getInstance().loadAndApply(player, player.getUniqueId().toString(), false);
                        });

                    } else {
                        player.sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.");
                    }
                }
            });
            return true;
        }
        if (command.getName().equalsIgnoreCase("mc-recalc")) {
            String uuid = player.getUniqueId().toString();

            Request request = new Request.Builder()
                    .url("http://fc-server.zapto.org/minecraft/recalc-bonus/" + uuid)
                    .post(RequestBody.create(new byte[0], null)) // –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ
                    .build();

            HealthDataFetcher.getClient().newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
                    player.sendMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞");
                }

                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    String json = response.body().string();

                    JSONObject obj = new JSONObject(json);
                    boolean updated = obj.optBoolean("updated", false);
                    String message = obj.optString("message", "‚úÖ –ë–æ–Ω—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!");

                    player.sendMessage(message);

                    if (updated) {
                        Bukkit.getScheduler().runTask(WebAuth.this, () ->
                                HealthManager.getInstance().loadAndApply(player, uuid, true)
                        );
                    }

                    response.close();
                }
            });

            return true;
        }



        if (command.getName().equalsIgnoreCase("mc-balance")) {
            String username = player.getName();

            RequestBody body = RequestBody.create(MediaType.parse("application/json"),
                    "{\"username\":\"" + username + "\"}");

            Request request = new Request.Builder()
                    .url("http://fc-server.zapto.org/minecraft/balance")
                    .post(body)
                    .addHeader("Content-Type", "application/json")
                    .build();
            JavaPlugin plugin = WebAuth.this;
            client.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
                    player.sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞.");
                }

                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    String json = response.body().string();
                    try {
                        JSONObject obj = new JSONObject(json);
                        String balance = obj.get("balance").toString();
                        player.sendMessage("üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + balance + "F");
                    } catch (Exception e) {
                        player.sendMessage("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
                        getLogger().warning("‚ùå –û—à–∏–±–∫–∞ JSON: " + e.getMessage());
                    }

                }
            });
            return true;
        }
        if (command.getName().equalsIgnoreCase("mc-pay")) {
            if (args.length != 2) {
                player.sendMessage("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mc-pay <–Ω–∏–∫> <—Å—É–º–º–∞>");
                return true;
            }

            String from = player.getName();
            String to = args[0];
            String amount = args[1];

            RequestBody body = RequestBody.create(MediaType.parse("application/json"),
                    "{\"fromUsername\":\"" + from + "\",\"toUsername\":\"" + to + "\",\"amount\":\"" + amount + "\"}");

            Request request = new Request.Builder()
                    .url("http://fc-server.zapto.org/minecraft/transfer")
                    .post(body)
                    .addHeader("Content-Type", "application/json")
                    .build();

            client.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
                    player.sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤–∞–ª—é—Ç—ã.");
                }

                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    String json = response.body().string();
                    if (response.isSuccessful()) {
                        player.sendMessage("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                    } else {
                        player.sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: " + json);
                    }
                }
            });
            return true;
        }

        return false;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç





    private void sendPlayerStatsToSite(Player player) {
        JSONObject payload = new JSONObject();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        payload.put("username", player.getName());
        payload.put("uuid", player.getUniqueId().toString());
        payload.put("health", HealthManager.getInstance().getHealth(player));
        payload.put("maxHealth", HealthManager.getInstance().getMaxHealth(player));
        payload.put("level", player.getLevel());
        payload.put("armor", player.getInventory().getArmorContents().length);
        payload.put("mainHand", player.getInventory().getItemInMainHand().getType().toString());

        // –≠—Ñ—Ñ–µ–∫—Ç—ã
        JSONArray effects = new JSONArray();
        for (PotionEffect effect : player.getActivePotionEffects()) {
            effects.put(effect.getType().getName().toLowerCase());
        }
        payload.put("effects", effects);

        // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
        JSONArray inventory = new JSONArray();
        for (ItemStack item : player.getInventory().getContents()) {
            if (item != null && item.getType() != Material.AIR) {
                JSONObject itemObj = new JSONObject();
                itemObj.put("item", item.getType().toString().toLowerCase());
                itemObj.put("amount", item.getAmount());
                inventory.put(itemObj);
            }
        }
        payload.put("inventory", inventory);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–∞–π—Ç
        Request request = new Request.Builder()
                .url("http://fc-server.zapto.org/minecraft/player-stats")  // –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ –Ω—É–∂–Ω—ã–π URL
                .post(RequestBody.create(payload.toString(), MediaType.parse("application/json")))
                .addHeader("Content-Type", "application/json")
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                getLogger().warning("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞: " + e.getMessage());
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                getLogger().info("üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ " + player.getName() + ": " + response.code());
            }
        });
    }

    // WebAuth.java
    private static final Map<String, String> playerTokens = new HashMap<>();

    public static void setToken(Player player, String token) {
        playerTokens.put(player.getName(), token);
    }

    public static String getToken(Player player) {
        return playerTokens.get(player.getName());
    }


}
