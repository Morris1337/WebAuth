package lv.funcatchers.rpghealth;

import lv.funcatchers.WebAuth;
import lv.funcatchers.utils.CustomHungerManager;
import org.bukkit.*;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.event.EventHandler;
import org.bukkit.event.player.PlayerItemHeldEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.potion.PotionEffect;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.*;

public class HotbarEatListener implements Listener {

    private final FoodConfigManager foodConfig;
    private final Map<UUID, Integer> readyToEatSlot = new HashMap<>();

    public HotbarEatListener(FoodConfigManager foodConfig) {
        this.foodConfig = foodConfig;
    }

    @EventHandler
    public void onHotbarKey(PlayerItemHeldEvent event) {
        Player player = event.getPlayer();
        UUID uuid = player.getUniqueId();
        int slot = event.getNewSlot();
        ItemStack item = player.getInventory().getItem(slot);

        if (item == null || !item.getType().isEdible()) return;

        if (isCustomExecutableItem(item)) return; // ‚õî –∏—Å–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –µ–¥—É

        Material type = item.getType();
        FoodConfigManager.FoodData data = foodConfig.get(type);
        if (data == null || data.heal <= 0) return;

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º "–ø–æ–¥–≥–æ—Ç–æ–≤–∫—É"
        if (!readyToEatSlot.containsKey(uuid) || readyToEatSlot.get(uuid) != slot) {
            readyToEatSlot.put(uuid, slot);
//            player.sendMessage(ChatColor.GRAY + "–í—ã –¥–µ—Ä–∂–∏—Ç–µ " + type.name() + ". –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, —á—Ç–æ–±—ã —Å—ä–µ—Å—Ç—å.");

            // –°–±—Ä–æ—Å–∏—Ç—å "–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å" —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            new BukkitRunnable() {
                @Override
                public void run() {
                    readyToEatSlot.remove(uuid, slot); // —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ª–æ—Ç —Ç–æ—Ç –∂–µ
                }
            }.runTaskLater(WebAuth.getInstance(), 60L); // 3 —Å–µ–∫

            return;
        }

        // –í—Ç–æ—Ä–æ–π —Ä–∞–∑ ‚Äî —Å—ä–µ–¥–∞–µ–º
        readyToEatSlot.remove(uuid);

        boolean fullHp = HealthManager.getInstance().getHealth(player) >= HealthManager.getInstance().getMaxHealth(player);
        boolean hasEffects = data.effects != null && !data.effects.isEmpty();

        if (fullHp && !hasEffects) {
            player.sendMessage(ChatColor.YELLOW + "–í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤—ã –∏ —ç—Ç–∞ –µ–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞—ë—Ç.");
            return;
        }

        if (item.getAmount() > 1) {
            item.setAmount(item.getAmount() - 1);
        } else {
            player.getInventory().setItem(slot, null);
        }

        player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_BURP, 1f, 1f);
        HealthManager.getInstance().heal(player, data.heal);
        CustomHungerManager.add(player, data.food); // ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—ã—Ç–æ—Å—Ç—å

        for (PotionEffect effect : data.effects) {
            player.addPotionEffect(effect);
        }

        player.sendMessage(ChatColor.GREEN + data.lore);
        player.updateInventory();
    }

    private boolean isCustomExecutableItem(ItemStack item) {
        if (item == null || !item.hasItemMeta()) return false;

        ItemMeta meta = item.getItemMeta();

        // üìõ –ù–∞–∑–≤–∞–Ω–∏–µ
        if (meta.hasDisplayName()) {
            String name = ChatColor.stripColor(meta.getDisplayName());
            if (name.equalsIgnoreCase("Rare Bread")) return true;
//            List<String> ignoredNames = Arrays.asList("Rare Bread", "Speed Orb", "Magic Apple");
        }

        // üìú –õ–æ—Ä
        if (meta.hasLore()) {
            for (String line : meta.getLore()) {
                String stripped = ChatColor.stripColor(line).toLowerCase();
                if (stripped.contains("—Ö–ª–µ–± –≥–µ—Ä–æ–µ–≤") || stripped.contains("–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö hp")) return true;
            }
        }

        // üß± –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ö–ª–µ–± ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–º
        if (item.getType() == Material.BREAD && !meta.hasLore() && !meta.hasDisplayName()) {
            return false;
        }

        // üß† ExecutableItems ID
        NamespacedKey eiKey = new NamespacedKey("ExecutableItems", "id");
        if (meta.getPersistentDataContainer().has(eiKey)) {
            return true;
        }

        return false;
    }

}
