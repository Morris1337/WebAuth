package lv.funcatchers;
import com.ssomar.score.api.executableitems.ExecutableItemsAPI;
import lv.funcatchers.EffectRegistry;
import lv.funcatchers.rpghealth.HealthManager;
import com.ssomar.score.api.executableitems.config.ExecutableItemInterface;
import com.ssomar.score.api.executableitems.config.ExecutableItemsManagerInterface;




import lv.funcatchers.rpgmana.ManaItemRegistry;
import lv.funcatchers.rpgmana.ManaManager;
import okhttp3.*;
import org.bukkit.Bukkit;
import org.bukkit.Sound;
import org.bukkit.attribute.Attribute;
import org.bukkit.attribute.AttributeInstance;
import org.bukkit.attribute.AttributeModifier;
import org.bukkit.entity.Egg;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.entity.Snowball;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.FoodLevelChangeEvent;
import org.bukkit.event.entity.VillagerReplenishTradeEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerRespawnEvent;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.json.JSONObject;
import org.bukkit.util.Vector; // ‚úÖ –≠—Ç–æ –Ω—É–∂–Ω—ã–π –∏–º–ø–æ—Ä—Ç

import net.md_5.bungee.api.ChatMessageType;
import net.md_5.bungee.api.chat.TextComponent;


import java.io.IOException;
import java.util.*;
import java.util.UUID;

import static lv.funcatchers.WebAuth.getUserId;

public class PlayerStatsManager implements CommandExecutor, Listener {
    private static final UUID ATTACK_MODIFIER_UUID = UUID.fromString("cb2b5e45-7b0b-4cb4-bbd6-bb1f3bcb1c9d");


    private final JavaPlugin plugin;
    private final OkHttpClient client = new OkHttpClient();

    // üß† –ö—ç—à —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ UUID –∏–≥—Ä–æ–∫–∞
    private static final Map<UUID, Map<String, Double>> cachedEffects = new HashMap<>();
    //private VillagerReplenishTradeEvent EffectRegistry;

    public PlayerStatsManager(JavaPlugin plugin) {
        this.plugin = plugin;
    }

    public Map<String, Double> getCachedEffects(Player player) {
        return cachedEffects.getOrDefault(player.getUniqueId(), new HashMap<>());
    }

    public static Map<String, Double> getEffects(Player player) {
        return cachedEffects.getOrDefault(player.getUniqueId(), new HashMap<>());
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player player)) {
            sender.sendMessage("‚ùå –¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.");
            return true;
        }

        if (command.getName().equalsIgnoreCase("mc-reloadstats")) {
            int userId = getUserId(player);
            if (userId == -1) {
                player.sendMessage("üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.");
                return true;
            }

            applyEffects(player); // —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –≤—Å—ë, –≤–∫–ª—é—á–∞—è –∑–∞–≥—Ä—É–∑–∫—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏ –±–æ–Ω—É—Å–æ–≤
            player.sendMessage("üîÅ –≠—Ñ—Ñ–µ–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å API.");
            return true;
        }



        if (command.getName().equalsIgnoreCase("mc-upgrade")) {
            if (args.length != 1) {
                player.sendMessage("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: /mc-upgrade <str|agi|vit|dex|int|luk>");
                return true;
            }

            String stat = args[0].toLowerCase();
            JSONObject payload = new JSONObject();
            payload.put("username", player.getName());
            payload.put("stat", stat);

            Request request = new Request.Builder()
                    .url("http://fc-server.zapto.org/minecraft/distribute-stat")
                    .post(RequestBody.create(payload.toString(), MediaType.parse("application/json")))
                    .build();

            client.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {
                    player.sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API");
                }

                @Override
                public void onResponse(Call call, Response response) throws IOException {
                    String json = response.body().string();
                    JSONObject obj = new JSONObject(json);

                    new BukkitRunnable() {
                        @Override
                        public void run() {
                            if (response.isSuccessful()) {
                                player.sendMessage("‚úÖ –ü—Ä–æ–∫–∞—á–∞–Ω–æ: " + obj.getString("stat") + " ‚Üí " + obj.getInt("newValue"));
                                applyEffects(player);
                            } else {
                                player.sendMessage("‚ùå –û—à–∏–±–∫–∞: " + obj.optString("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∫–∞—á–∞—Ç—å"));
                            }
                        }
                    }.runTask(plugin);
                }
            });
            return true;
        }

        return false;
    }

    // üß† –ó–∞–≥—Ä—É–∂–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–∑ API, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞
    public void applyEffects(Player player) {
        int userId = getUserId(player);
        if (userId == -1) {
            System.out.println("‚ùå userId –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è " + player.getName());
            return;
        }
        Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {
            EffectRegistry.loadFromServer(userId);
            Map<String, Double> effects = EffectsFetcher.fetchEffects(userId);

// üëá –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –±–æ–Ω—É—Å—ã –∏–∑ EffectRegistry –≤ –æ–±—â—É—é –∫–∞—Ä—Ç—É
            String[] bonusTypes = {
                    "attack_speed_bonus", "speed_bonus",
                    "dodge_chance", "hunger_penalty",
                    "vit_hp_bonus", "vit_armor_bonus",
                    "attack_bonus", "luck_drop_bonus",
                    "accuracy_bonus", "ranged_damage_bonus",
                    "int", "mana_bonus", "mana_regen"
            };

            for (String type : bonusTypes) {
                double bonus = EffectRegistry.getBonus(type);
                effects.put(type, bonus); // üëà –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
            }

            cachedEffects.put(player.getUniqueId(), effects);


            Bukkit.getScheduler().runTask(plugin, () -> {
                applyBonuses(player, effects);
                ManaManager.init(player); // ‚úÖ —Ç–µ–ø–µ—Ä—å max –∏ current –±—É–¥—É—Ç —Ä–∞–≤–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É mana_bonus
            });

        });
    }

    private void applyBonuses(Player player, Map<String, Double> effects) {
        AttributeInstance armorAttr = player.getAttribute(Attribute.GENERIC_ARMOR);
        if (armorAttr == null) return;

        double baseArmor = 1.0;
        double vit = effects.getOrDefault("vit", 0.0);
        double vitBonus = vit; // –∫–∞–∂–¥–æ–µ –æ—á–∫–æ –≤–∏—Ç = 1 –±—Ä–æ–Ω—è

        double finalArmor = baseArmor + vitBonus;

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        UUID modUuid = UUID.nameUUIDFromBytes(("vit-armor-bonus-" + player.getUniqueId()).getBytes());
        armorAttr.getModifiers().stream()
                .filter(mod -> mod.getUniqueId().equals(modUuid))
                .forEach(armorAttr::removeModifier);

        AttributeModifier vitModifier = new AttributeModifier(
                modUuid,
                "VitArmorBonus",
                finalArmor,
                AttributeModifier.Operation.ADD_NUMBER
        );

        // –°–±—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –±—Ä–æ–Ω–∏
        armorAttr.setBaseValue(0.0);
        armorAttr.addModifier(vitModifier);

        player.sendMessage("üõ° –í–ò–¢ –±—Ä–æ–Ω—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: +" + vitBonus + " (–∏—Ç–æ–≥–æ: " + finalArmor + ")");
        player.sendMessage("üß± –†–µ–∞–ª—å–Ω–∞—è –±—Ä–æ–Ω—è: " + armorAttr.getValue());

        //–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ê–ì–ò
        System.out.println("‚ñ∂ AGI RAW EFFECTS: " + effects);
        AttributeInstance attackSpeedAttr = player.getAttribute(Attribute.GENERIC_ATTACK_SPEED);
        if (attackSpeedAttr != null) {
            double bonus = effects.getOrDefault("attack_speed_bonus", 0.0);
            AttributeModifier attackSpeedMod = new AttributeModifier(
                    UUID.nameUUIDFromBytes(("agi-attack-speed-" + player.getUniqueId()).getBytes()),
                    "AgiAttackSpeed",
                    bonus,
                    AttributeModifier.Operation.ADD_SCALAR
            );

            attackSpeedAttr.getModifiers().stream()
                    .filter(m -> m.getName().equals("AgiAttackSpeed"))
                    .forEach(attackSpeedAttr::removeModifier);

            attackSpeedAttr.addModifier(attackSpeedMod);
        }
        AttributeInstance moveSpeedAttr = player.getAttribute(Attribute.GENERIC_MOVEMENT_SPEED);
        if (moveSpeedAttr != null) {
            double speedBonus = effects.getOrDefault("speed_bonus", 0.0);
            AttributeModifier moveSpeedMod = new AttributeModifier(
                    UUID.nameUUIDFromBytes(("agi-speed-bonus-" + player.getUniqueId()).getBytes()),
                    "AgiSpeedBonus",
                    speedBonus,
                    AttributeModifier.Operation.ADD_SCALAR
            );

            moveSpeedAttr.getModifiers().stream()
                    .filter(m -> m.getName().equals("AgiSpeedBonus"))
                    .forEach(moveSpeedAttr::removeModifier);

            moveSpeedAttr.addModifier(moveSpeedMod);
        }
// üì¶ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ —á–µ—Ä–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç HASTE
        double breakSpeedBonus = effects.getOrDefault("block_break_speed_bonus", 0.0);
        if (breakSpeedBonus > 0.0) {
            // –û–≥—Ä–∞–Ω–∏—á–∏–º —É—Ä–æ–≤–µ–Ω—å Haste
            int amplifier = Math.min((int) Math.round(breakSpeedBonus) - 1, 4);

            player.removePotionEffect(PotionEffectType.FAST_DIGGING);
            player.addPotionEffect(new PotionEffect(
                    PotionEffectType.FAST_DIGGING,
                    20 * 60 * 60, // 1 —á–∞—Å –≤ —Ç–∏–∫–∞—Ö
                    amplifier,
                    false,
                    false
            ));
            player.sendMessage("‚õè –°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–ø–∞–Ω–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ (Haste " + (amplifier + 1) + ")");
        } else {
            player.removePotionEffect(PotionEffectType.FAST_DIGGING);
        }
        AttributeInstance knockbackAttr = player.getAttribute(Attribute.GENERIC_ATTACK_KNOCKBACK);
        if (knockbackAttr != null) {
            double knockbackBonus = effects.getOrDefault("knockback_bonus", 0.0);

            UUID knockbackUUID = UUID.nameUUIDFromBytes(("str-knockback-bonus-" + player.getUniqueId()).getBytes());

            // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            knockbackAttr.getModifiers().stream()
                    .filter(mod -> mod.getUniqueId().equals(knockbackUUID))
                    .forEach(knockbackAttr::removeModifier);

            // –ü—Ä–∏–º–µ–Ω–∏–º –Ω–æ–≤—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            AttributeModifier knockMod = new AttributeModifier(
                    knockbackUUID,
                    "STR_KnockbackBonus",
                    knockbackBonus,
                    AttributeModifier.Operation.ADD_NUMBER
            );
            knockbackAttr.addModifier(knockMod);

            player.sendMessage("üí• –°–∏–ª–∞ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è STR: +" + knockbackBonus);
        }


    }


    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onAttack(EntityDamageByEntityEvent event) {
        // === üéØ –î–∞–ª—å–Ω–∏–π –±–æ–π: Projectile (–ª—É–∫, –∞—Ä–±–∞–ª–µ—Ç, —Ç—Ä–µ–∑—É–±–µ—Ü, —Å–Ω–µ–∂–∫–∏, —è–π—Ü–∞ –∏ —Ç.–¥.) ===
        if (event.getDamager() instanceof org.bukkit.entity.Projectile projectile &&
                projectile.getShooter() instanceof Player shooter &&
                event.getEntity() instanceof LivingEntity target) {

            Map<String, Double> shooterEffects = cachedEffects.getOrDefault(shooter.getUniqueId(), new HashMap<>());
            Map<String, Double> targetEffects = cachedEffects.getOrDefault(target.getUniqueId(), new HashMap<>());

            double accuracy = shooterEffects.getOrDefault("accuracy_bonus", 0.0);
            double dodge = targetEffects.getOrDefault("dodge_chance", 0.0);
            double finalHitChance = 100.0 - Math.max(0, dodge - accuracy);

//            if (Math.random() * 100.0 > finalHitChance) {
//                event.setCancelled(true);
//                shooter.sendMessage("üéØ –ü—Ä–æ–º–∞—Ö! –¶–µ–ª—å —É–∫–ª–æ–Ω–∏–ª–∞—Å—å.");
//                return;
//            }
            if (Math.random() * 100.0 > finalHitChance) {
                event.setCancelled(true);

                String[] missMessages = { "‚ùå MISS", "üéØ –ü—Ä–æ–º–∞—Ö", "üåÄ –£–∫–ª–æ–Ω–µ–Ω–∏–µ" };
                String msg = missMessages[new Random().nextInt(missMessages.length)];

                shooter.spigot().sendMessage(ChatMessageType.ACTION_BAR, new TextComponent(msg));
                return;
            }


            double rangedBonus = shooterEffects.getOrDefault("ranged_damage_bonus", 0.0);
            double damageWithBonus = event.getDamage() * (1.0 + rangedBonus);
            event.setDamage(damageWithBonus);

            shooter.spigot().sendMessage(
                    ChatMessageType.ACTION_BAR,
                    new TextComponent("üèπ –£—Ä–æ–Ω —Å –±–æ–Ω—É—Å–æ–º (DEX): " + String.format("%.1f", event.getFinalDamage()))
            );
            if (projectile instanceof Snowball) {
                double snowballBonus = shooterEffects.getOrDefault("snowball_damage_bonus", 0.0);
                event.setDamage(snowballBonus);
                shooter.spigot().sendMessage(ChatMessageType.ACTION_BAR,
                        new TextComponent("‚ùÑ –£—Ä–æ–Ω —Å–Ω–µ–∂–∫–æ–º: " + snowballBonus));
                if (snowballBonus > 0.0) {
                    Bukkit.getScheduler().runTask(plugin, () -> target.damage(snowballBonus, shooter));
                }
            } else if (projectile instanceof Egg) {
                double eggBonus = shooterEffects.getOrDefault("egg_damage_bonus", 0.0);
                event.setDamage(eggBonus);
                shooter.spigot().sendMessage(ChatMessageType.ACTION_BAR,
                        new TextComponent("ü•ö –£—Ä–æ–Ω —è–π—Ü–æ–º: " + eggBonus));
                if (eggBonus > 0.0) {
                    Bukkit.getScheduler().runTask(plugin, () -> target.damage(eggBonus, shooter));
                }
            }


            return; // ‚ö†Ô∏è –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∏–∂–µ –∫–∞–∫ –±–ª–∏–∂–Ω–∏–π –±–æ–π!
        }

        // === üí• –ë–ª–∏–∂–Ω–∏–π –±–æ–π: –ò–≥—Ä–æ–∫ –∫–∞–∫ –∞—Ç–∞–∫—É—é—â–∏–π ===
        if (event.getDamager() instanceof Player player) {
            if (event.getEntity() instanceof LivingEntity target) {
                double distance = player.getLocation().distance(target.getLocation());
                if (distance > 2.25) {
                    event.setCancelled(true);
//                    player.sendMessage("‚õî –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –¥–ª—è –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è! (<2 –±–ª–æ–∫–æ–≤)");
                    return;
                }
            }
            Map<String, Double> effects = cachedEffects.getOrDefault(player.getUniqueId(), new HashMap<>());
            double bonus = EffectRegistry.getBonus("attack_bonus");

            AttributeInstance attribute = player.getAttribute(Attribute.GENERIC_ATTACK_DAMAGE);
            if (attribute == null) return;

            attribute.getModifiers().stream()
                    .filter(mod -> mod.getUniqueId().equals(ATTACK_MODIFIER_UUID))
                    .forEach(attribute::removeModifier);

            AttributeModifier modifier = new AttributeModifier(
                    ATTACK_MODIFIER_UUID,
                    "attack_bonus_from_stats",
                    bonus,
                    AttributeModifier.Operation.ADD_NUMBER
            );
            attribute.addModifier(modifier);

            double knockbackBonus = effects.getOrDefault("knockback_bonus", 0.0);
            if (knockbackBonus > 0.0 && event.getEntity() instanceof LivingEntity target) {
                double knockPower = Math.min(knockbackBonus, 3.0);
                Vector direction = target.getLocation().toVector().subtract(player.getLocation().toVector()).normalize();
                direction.setY(0.25);
                target.setVelocity(direction.multiply(knockPower));
                player.sendMessage("üí• –°—Ä–∞–±–æ—Ç–∞–ª –±–æ–Ω—É—Å STR: –æ—Ç–∫–∏–¥—ã–≤–∞–Ω–∏–µ!");
            }

            player.spigot().sendMessage(
                    ChatMessageType.ACTION_BAR,
                    new TextComponent("‚öî –£—Ä–æ–Ω —Å –±–æ–Ω—É—Å–æ–º (STR): " + String.format("%.1f", event.getFinalDamage()))
            );

            System.out.println("‚öî STR –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–Ω–∞ –ø—Ä–∏–º–µ–Ω—ë–Ω: +" + bonus + " ‚Üí " + player.getName());
        }

    }




    // üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –≤—Ö–æ–¥–µ
    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        applyEffects(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = false)
    public void onPlayerDamaged(EntityDamageByEntityEvent event) {
        if (!(event.getEntity() instanceof Player player)) return;

        Map<String, Double> effects = cachedEffects.getOrDefault(player.getUniqueId(), new HashMap<>());
        double dodgeChance = effects.getOrDefault("dodge_chance", 0.0);

//        if (Math.random() < dodgeChance) {
//            event.setCancelled(true);
//            player.sendMessage("üåÄ –í—ã —É–≤–µ—Ä–Ω—É–ª–∏—Å—å –æ—Ç –∞—Ç–∞–∫–∏!");
//            System.out.println("‚úÖ –£–≤–æ—Ä–æ—Ç –æ—Ç –∞—Ç–∞–∫–∏! –£—Ä–æ–Ω –Ω–µ –Ω–∞–Ω–µ—Å—ë–Ω.");
//        }
        if (Math.random() < dodgeChance) {
            event.setCancelled(true);

            String[] dodgeMessages = { "üåÄ –£–≤–æ—Ä–æ—Ç!", "üí® MISS", "üõ° –í—ã —É–≤–µ—Ä–Ω—É–ª–∏—Å—å!" };
            String msg = dodgeMessages[new Random().nextInt(dodgeMessages.length)];

            player.spigot().sendMessage(ChatMessageType.ACTION_BAR, new TextComponent(msg));
            System.out.println("‚úÖ –£–≤–æ—Ä–æ—Ç –æ—Ç –∞—Ç–∞–∫–∏! –£—Ä–æ–Ω –Ω–µ –Ω–∞–Ω–µ—Å—ë–Ω.");
        }else {
            System.out.println("‚ùå –ù–µ —É–≤–µ—Ä–Ω—É–ª—Å—è. –£—Ä–æ–Ω: " + event.getFinalDamage());
        }
    }



    @EventHandler
    public void onFoodChange(FoodLevelChangeEvent event) {
        if (!(event.getEntity() instanceof Player player)) return;

        Map<String, Double> effects = cachedEffects.getOrDefault(player.getUniqueId(), new HashMap<>());
        double hungerPenalty = effects.getOrDefault("hunger_penalty", 0.0);

        if (hungerPenalty > 0 && Math.random() < hungerPenalty) {
            int newLevel = event.getFoodLevel() - 1;
            event.setFoodLevel(Math.max(newLevel, 0));
            player.sendMessage("üçñ –ë—ã—Å—Ç—Ä–µ–µ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª–∏—Å—å –∏–∑-–∑–∞ AGI!");
        }
    }

    public static void markAuthenticated(Player player) {
        // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    }

    public static void load(Player player) {
        int userId = getUserId(player); // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –∏–ª–∏ –≤—ã–∑–æ–≤–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

        if (userId == -1) {
            System.out.println("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ userId –¥–ª—è " + player.getName());
            return;
        }

        Map<String, Double> effects = EffectsFetcher.fetchEffects(userId);
        cachedEffects.put(player.getUniqueId(), effects);
        System.out.println("‚úÖ –≠—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è " + player.getName());
    }


    public static void unload(Player player) {
        cachedEffects.remove(player.getUniqueId());
    }

    public static double getEffect(Player player, String key) {
        Map<String, Double> map = cachedEffects.getOrDefault(player.getUniqueId(), new HashMap<>());
        return map.getOrDefault(key, 0.0);
    }

    @EventHandler
    public void onUseMagicItem(PlayerInteractEvent event) {
        ExecutableItemsManagerInterface manager = ExecutableItemsAPI.getExecutableItemsManager();
        Player player = event.getPlayer();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ExecutableItems API
        Optional<ExecutableItemInterface> eiOpt = manager.getExecutableItem(event.getItem());
        if (eiOpt.isEmpty()) return;

        ExecutableItemInterface ei = eiOpt.get();
        String itemId = ei.getId();
        if (ei == null) return;

        String id = ei.getId(); // –ù–∞–ø—Ä–∏–º–µ—Ä: magic_wand

        if (!ManaItemRegistry.isMagicItem(id)) return;

        int cost = ManaItemRegistry.getManaCost(id);
        double currentMana = ManaManager.getCurrentMana(player);

        if (currentMana < cost) {
            event.setCancelled(true);
            player.sendMessage("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!");
            player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1f, 1f);
            return;
        }

        ManaManager.subtract(player, cost);
        player.sendMessage("‚ú® –ü–æ—Ç—Ä–∞—á–µ–Ω–æ " + cost + " SP –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è " + id);
    }

}
